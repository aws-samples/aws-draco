# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
# AWS infrastructure to copy RDS DB Snapshots off to a separate DR account.
# This template is for the CONSUMER of the snapshots ie. the DR account.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "For receiving (DR) copies of DB Snapshots from another account"

Parameters:
  CodeBucket:
    Description: The S3Bucket that stores the Lambdas
    Default: draco
    Type: String
  ConsumerLambdaVersion:
    Description: The S3 Bucket version of the Consumer Lambda code to use
    Default: draco
    Type: String
  Wait4CopyLambdaVersion:
    Description: The S3 Bucket version of the Wait4Copy Lambda code to use
    Default: draco
    Type: String
  SourceAcct:
    Description: The account that shares the snapshot copies to be DRd
    Default: 111111111111
    Type: String
  TargetAcct:
    Default: 222222222222
    Description: The account that saves the DR Snapshots
    Type: String
  DrTagKey:
    Description: The tag key that identifies snapshot transit copies made for DR
    Default: DR
    Type: String
  DrTagValue:
    Description: The tag value that identifies snapshot transit copies made for DR
    Default: DRSnapshotCopy
    Type: String

Resources:
  SnapshotEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Key used for encrypting DR copies
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: '2012-10-17'
        Id: dr_key_policy
        Statement:
        - Sid: Enable DR account full access
          Effect: Allow
          Principal:
            AWS: !Sub ${AWS::AccountId}
          Action: kms:*
          Resource: '*'
        - Sid: Lambda to copy encrypted RDS Snapshots 
          Effect: Allow
          Principal:
            AWS:
              - !GetAtt LambdaExecutionRole.Arn
          Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:ListGrants
            - kms:RevokeGrant
            - kms:CreateGrant
            - kms:DescribeKey
          Resource: '*'
          

  # Permissions on kms should be tightened
  #
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudwatchLogs
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:GetLogEvents
              Resource:
                - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
        - PolicyName: ManipulateSnapshots
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - rds:CopyDBSnapshot
                - rds:CopyDBClusterSnapshot
                - rds:DeleteDBSnapshot
                - rds:DeleteDBClusterSnapshot
                - rds:ModifyDBSnapshotAttribute
                - rds:DescribeDBSnapshots
                - rds:DescribeDBClusterSnapshots
                - rds:ListTagsForResource
                - ec2:CopySnapshot
                - ec2:CreateTags
                - ec2:DescribeTags
                - ec2:DescribeSnapshots
                - ec2:DeleteSnapshot
              Resource: '*'
        - PolicyName: AllowPublish2ProducerTopic
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Sub "arn:aws:sns:${AWS::Region}:${SourceAcct}:DracoProducer"
        - PolicyName: DecryptSnapshots
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:ListGrants
              - kms:RevokeGrant
              - kms:CreateGrant
              - kms:DescribeKey
              Resource: '*'
        - PolicyName: AllowStepfunctions
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:wait4copy-${AWS::AccountId}"
  

  

  SnapshotTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SnapshotTopic
      PolicyDocument:
        Version: '2012-10-17'
        Id: SetupSnapshotTopic
        Statement:
        - Sid: Defaults
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
            - sns:GetTopicAttributes
            - sns:SetTopicAttributes
            - sns:AddPermission
            - sns:RemovePermission
            - sns:DeleteTopic
            - sns:Subscribe
            - sns:ListSubscriptionsByTopic
            - sns:Publish
            - sns:Receive
          Resource: !Ref SnapshotTopic
          Condition:
            StringEquals:
              AWS:SourceOwner: !Ref SourceAcct
        - Sid: AllowSourcePublish
          Effect: Allow
          Principal:
            AWS: !Ref SourceAcct
          Action:
            - sns:Publish
          Resource: !Ref SnapshotTopic

  SnapshotTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: DracoConsumer
      DisplayName: Topic for Snapshot Processing
      Subscription:
      - Endpoint: !GetAtt SnapshotHandlerLambda.Arn
        Protocol: lambda


  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SnapshotTopic
      FunctionName: !GetAtt SnapshotHandlerLambda.Arn


  SnapshotHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Code that copies the shared snapshot for DR 
      Environment:
        Variables:
          DR_ACCT: !Ref TargetAcct
          KEY_ARN: !GetAtt SnapshotEncryptionKey.Arn
          PRODUCER_TOPIC_ARN: !Sub "arn:aws:sns:${AWS::Region}:${SourceAcct}:DracoProducer"
          STATE_MACHINE_ARN: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:wait4copy-${AWS::AccountId}"
          TAG_KEY: !Ref DrTagKey
          TAG_VALUE: !Ref DrTagValue
      Handler: consumer.handler
      Runtime: nodejs12.x
      Timeout: 60
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: draco/consumer.zip
        S3ObjectVersion: !Ref ConsumerLambdaVersion

  Wait4Copy:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${CodeBucket}/draco/wait4copy.yaml"
      Parameters:
        CodeBucket: !Ref CodeBucket
        Wait4CopyLambdaVersion: !Ref Wait4CopyLambdaVersion
        NotifyTopicArn: !Ref SnapshotTopic

Outputs:
  DrTopicArn:
    Value: !Ref SnapshotTopic

  DrLambdaRoleArn:
    Value: !GetAtt LambdaExecutionRole.Arn

# vim: sts=2 et sw=2:
